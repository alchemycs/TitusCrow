<?php
/*
    TitusCrow - A library to manage scheduled events with complex recurrence
    Copyright (C) 2011  Michael McHugh

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * There are many things that can be events. This file provides a concrete class
 * that implements the {@link ITCEvent} interface. Developers can easily extend
 * this class to provide added functionailty to there events.
 *
 * @package TitusCrow
 * @subpackage Event
 * @author  Michael McHugh <alchemist@alchemycs.net.au>
 * @copyright Michael McHugh, 2011
 * @license http://www.gnu.org/licenses/gpl.html GNU General Public License
 *
 */

/**
 * A concrete class that implements the {@link ITCEvent} interface. Developers
 * can easily use or extend this class to provide added functionailty to
 * their events.
 *
 * @package TitusCrow
 * @subpackage Event
 * @author  Michael McHugh <alchemist@alchemycs.net.au>
 * @copyright Michael McHugh, 2011
 * @license http://www.gnu.org/licenses/gpl.html GNU General Public License
 */
class TCSimpleEvent implements ITCEvent {

  /**
   *
   * @var sting Name of the event
   */
  protected $name;

  /**
   * Constructs a simple event with the name passed in the constructor. If the
   * name is empty or NULL then a unique "Unnamed Event" will be autogenerated.
   *
   * @param string $aName An optional string naming the event
   */
  public function __construct($aName = null) {
    if (empty($aName)) {
      $aName = uniqid('Unnamed Event: ', true);
    }
    $this->name = $aName;
  }

  /**
   *
   * {@inheritdoc}
   */
  public function getName() {
    return $this->name;
  }

  /**
   *
   * {@inheritdoc}
   */
  public function setName($aName) {
    $this->name = $aName;
    return $this; //Allow chaining
  }

  /**
   *
   * {@inheritdoc}
   */
  public function __toString() {
    return $this->getName();
  }

  /**
   * {@inheritdoc}
   */
  public function equals(ITCEvent $anEvent) {
    return ($anEvent->name == $this->name);
  }



}